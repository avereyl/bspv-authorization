/*
 * This file is generated by jOOQ.
*/
package org.bspv.authorization.jooq.tables.records;


import java.util.UUID;

import javax.annotation.Generated;

import org.bspv.authorization.jooq.tables.Authorities;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthoritiesRecord extends UpdatableRecordImpl<AuthoritiesRecord> implements Record3<UUID, String, String> {

    private static final long serialVersionUID = 287161550;

    /**
     * Setter for <code>PUBLIC.AUTHORITIES.USER_ID</code>.
     */
    public void setUserId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.AUTHORITIES.USER_ID</code>.
     */
    public UUID getUserId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>PUBLIC.AUTHORITIES.AUTHORITY</code>.
     */
    public void setAuthority(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.AUTHORITIES.AUTHORITY</code>.
     */
    public String getAuthority() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.AUTHORITIES.SERVICE</code>.
     */
    public void setService(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.AUTHORITIES.SERVICE</code>.
     */
    public String getService() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record3<UUID, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<UUID, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return Authorities.AUTHORITIES.USER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Authorities.AUTHORITIES.AUTHORITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Authorities.AUTHORITIES.SERVICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAuthority();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getService();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthoritiesRecord value1(UUID value) {
        setUserId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthoritiesRecord value2(String value) {
        setAuthority(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthoritiesRecord value3(String value) {
        setService(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthoritiesRecord values(UUID value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthoritiesRecord
     */
    public AuthoritiesRecord() {
        super(Authorities.AUTHORITIES);
    }

    /**
     * Create a detached, initialised AuthoritiesRecord
     */
    public AuthoritiesRecord(UUID userId, String authority, String service) {
        super(Authorities.AUTHORITIES);

        set(0, userId);
        set(1, authority);
        set(2, service);
    }
}
